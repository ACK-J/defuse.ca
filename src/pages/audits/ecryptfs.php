<?php
    Upvote::render_arrows(
        "auditecryptfs",
        "defuse_pages",
        "eCryptfs Security Audit",
        "The results of an eCryptfs security audit.",
        "https://defuse.ca/audits/ecryptfs.htm"
    );
?>
<div class="pagedate">
January 22, 2014
</div>
<h1>eCryptfs Security Audit</h1>

<p>
This is the result of a short 10-hour security audit of
<a href="http://ecryptfs.org/">eCryptfs</a>. The report has been posted to the
<a href="http://permalink.gmane.org/gmane.comp.file-systems.ecryptfs.general/501">
mailing list</a>, so check there for follow-up.
</p>

<p>
Thanks to Igor Sviridov for funding this audit.
</p>

<pre>
-----------------------------------------------------------------------
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;eCryptfs Security Audit
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Taylor Hornby
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;January 22, 2014
-----------------------------------------------------------------------

1. Introduction

&nbsp;&nbsp; This document describes the results of a 10-hour security audit on
&nbsp;&nbsp; the latest version (at time of writing) of the eCryptfs encrypted
&nbsp;&nbsp; file system. It follows a previous 10-hour audit on EncFS [4].

1.1. What is eCryptfs?

&nbsp;&nbsp; eCryptfs is an encrypting file system similar to EncFS. The main
&nbsp;&nbsp; difference is that it runs as a kernel module instead of on top of
&nbsp;&nbsp; FUSE.

1.2. Audit Results Summary

&nbsp;&nbsp; Due to the limited amount of time, this audit could only cover
&nbsp;&nbsp; a small portion of eCryptfs&#039;s design and implementation. Analysis of
&nbsp;&nbsp; the cryptographic design was prioritized.

&nbsp;&nbsp; Documentation about eCryptfs&#039;s crypto design is sparse and
&nbsp;&nbsp; contradictory. The design has changed dramatically from initial
&nbsp;&nbsp; (very old) design documents like [3]. The only reliable source is the
&nbsp;&nbsp; actual source code itself, which takes longer to review.

&nbsp;&nbsp; Some non-critical issues were discovered while looking over
&nbsp;&nbsp; eCryptfs&#039;s source code. These are documented in the next section.

2. Issues

2.1. ecryptfs-rewrap-passphrase salt reuse

&nbsp;&nbsp; Exploitability: &nbsp;Low
&nbsp;&nbsp; Security Impact: Low

&nbsp;&nbsp; The ecryptfs-rewrap-passphrase command does not generate a new random
&nbsp;&nbsp; salt when the password is changed. I&#039;m not sure if this is an
&nbsp;&nbsp; architectural requirement or not (I don&#039;t think so), but a new random
&nbsp;&nbsp; salt would be better.

2.2. IV is the MD5 hash of key and extract (block) offset.

&nbsp;&nbsp; Exploitability: &nbsp;Low
&nbsp;&nbsp; Security Impact: Low

&nbsp;&nbsp; The &quot;Root IV&quot; is the MD5 hash of the session encryption key, which is
&nbsp;&nbsp; a per-file random key. From the Root IV, the IV for an extract
&nbsp;&nbsp; (portion of the file) is generated by hashing it with the offset.

&nbsp;&nbsp; This doesn&#039;t immediately lead to vulnerabilities, and it&#039;s much
&nbsp;&nbsp; better than the way EncFS does it, but it doesn&#039;t seem safe. It would
&nbsp;&nbsp; be much better to use proper CBC ESSIV mode or XTS mode.

&nbsp;&nbsp; There is a comment in the code that derives the IV...

&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;/* TODO: It is probably secure to just cast the least
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; * significant bits of the root IV into an unsigned long and
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; * add the offset to that rather than go through all this
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; * hashing business. -Halcrow */

&nbsp;&nbsp; ...which is wrong, and needs to be removed.

2.3. Filename Encryption Does Not Use IVs

&nbsp;&nbsp; Exploitability: &nbsp;Low
&nbsp;&nbsp; Security Impact: Low

&nbsp;&nbsp; The file name encryption in encfs_write_tag_70_packet uses a zero IV
&nbsp;&nbsp; for filename encryption. However, &quot;random bytes&quot; are prepended to the
&nbsp;&nbsp; path before encrypting, and they are supposed to &quot;do the job of the
&nbsp;&nbsp; IV here.&quot; However, they are not actually random bytes, they are the
&nbsp;&nbsp; hash the &quot;session key encryption key.&quot; This key does not appear to
&nbsp;&nbsp; change, so I doubt these bytes are serving the purpose of an IV.

&nbsp;&nbsp; This may be required for determinism (so that you can look up a file
&nbsp;&nbsp; path without iterating through all files in a directory), but it&#039;s
&nbsp;&nbsp; a weird way of doing it. The comment does say &quot;We do not want to
&nbsp;&nbsp; encrypt the same filename with the same key and IV, which may happen
&nbsp;&nbsp; with hard links, so we prepend random bits to each filename&quot; ... but
&nbsp;&nbsp; it doesn&#039;t. This needs further analysis.

&nbsp;&nbsp; Prepending random IVs is not sufficient when using cipher modes other
&nbsp;&nbsp; than CBC, such as GCM and CTR, which are being discussed on the
&nbsp;&nbsp; mailing list [1,2].

3. Future Work

&nbsp;&nbsp; The following sections document what should be prioritized in future
&nbsp;&nbsp; audits.

3.1. The Mailing List is Discussing GCM Mode

&nbsp;&nbsp; Possible Exploitability: &nbsp;Medium
&nbsp;&nbsp; Possible Security Impact: High

&nbsp;&nbsp; The eCryptfs mailing list is discussing the option of using other
&nbsp;&nbsp; modes like GCM and CTR. There are already patches submitted that
&nbsp;&nbsp; allow this, however, as far as I can tell, they haven&#039;t made it into
&nbsp;&nbsp; the git repository.

&nbsp;&nbsp; Using a stream mode like GCM would destroy eCryptfs&#039;s security, since
&nbsp;&nbsp; the key stream would not depend on the plaintext and an attacker
&nbsp;&nbsp; could simply XOR snapshots of a ciphertext at two different times to
&nbsp;&nbsp; learn the XOR of the plaintexts that changed. This is not the case
&nbsp;&nbsp; with a block mode like CBC (currently the default).

3.2. Authenticated Encryption

&nbsp;&nbsp; The mailing list is discussing patches for adding authenticated
&nbsp;&nbsp; encryption (GCM, HMAC, etc). There was not enough time to review
&nbsp;&nbsp; these proposed changes, and I&#039;m not sure if they&#039;re already in the
&nbsp;&nbsp; released code or not.

3.3. Produce Crypto Documentation

&nbsp;&nbsp; eCryptfs&#039;s current crypto implementation is not well-documented. It
&nbsp;&nbsp; would be useful to create a document that describes it at a high
&nbsp;&nbsp; level, so that it is easier for experienced cryptographers to review
&nbsp;&nbsp; it.

4. Conclusion

&nbsp;&nbsp; eCryptfs appears to have a better crypto design than EncFS [4], but
&nbsp;&nbsp; there are some red flags indicating that it was not designed by
&nbsp;&nbsp; a cryptographer, and has not received enough security review. It
&nbsp;&nbsp; should be safe to use, but more auditing would be a good idea.

5. References

[1] http://thread.gmane.org/gmane.comp.file-systems.ecryptfs.general/494

[2] http://www.spinics.net/lists/ecryptfs/msg00381.html

[3] http://ecryptfs.sourceforge.net/ecryptfs.pdf

[4] https://defuse.ca/audits/encfs.htm
</pre>
