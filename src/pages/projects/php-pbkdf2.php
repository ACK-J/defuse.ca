<h1>PBKDF2 For PHP</h1>
<p>PBKDF2 (Password Based Key Derivation Function) for PHP. The following code is public domain, feel free to use it for any purpose. The code complies with test vectors at <a href="https://www.ietf.org/rfc/rfc6070.txt">https://www.ietf.org/rfc/rfc6070.txt</a>.</p>
<div style="font-family: monospace; overflow:scroll; background-color: black; color: white; padding:10px;">
&nbsp;&nbsp;&nbsp;&nbsp;/*<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;PBKDF2&nbsp;key&nbsp;derivation&nbsp;function&nbsp;as&nbsp;defined&nbsp;by&nbsp;RSA&#039;s&nbsp;PKCS&nbsp;#5:&nbsp;https://www.ietf.org/rfc/rfc2898.txt<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;$algorithm&nbsp;-&nbsp;The&nbsp;hash&nbsp;algorithm&nbsp;to&nbsp;use.&nbsp;Recommended:&nbsp;SHA256<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;$password&nbsp;-&nbsp;The&nbsp;password.<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;$salt&nbsp;-&nbsp;A&nbsp;salt&nbsp;that&nbsp;is&nbsp;unique&nbsp;to&nbsp;the&nbsp;password.<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;$count&nbsp;-&nbsp;Iteration&nbsp;count.&nbsp;Higher&nbsp;=&nbsp;better.&nbsp;Recommended:&nbsp;At&nbsp;least&nbsp;1024.<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;$key_length&nbsp;-&nbsp;The&nbsp;length&nbsp;of&nbsp;the&nbsp;derived&nbsp;key&nbsp;in&nbsp;BYTES.<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Returns:&nbsp;A&nbsp;$key_length-byte&nbsp;key&nbsp;derived&nbsp;from&nbsp;the&nbsp;password&nbsp;and&nbsp;salt&nbsp;(in&nbsp;binary).<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Test&nbsp;vectors&nbsp;can&nbsp;be&nbsp;found&nbsp;here:&nbsp;https://www.ietf.org/rfc/rfc6070.txt<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/<br />
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;pbkdf2($algorithm,&nbsp;$password,&nbsp;$salt,&nbsp;$count,&nbsp;$key_length)<br />
&nbsp;&nbsp;&nbsp;&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$algorithm&nbsp;=&nbsp;strtolower($algorithm);<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(!in_array($algorithm,&nbsp;hash_algos(),&nbsp;true))<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die(&#039;PBKDF2&nbsp;ERROR:&nbsp;Invalid&nbsp;hash&nbsp;algorithm.&#039;);<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if($count&nbsp;&lt;&nbsp;0&nbsp;||&nbsp;$key_length&nbsp;&lt;&nbsp;0)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die(&#039;PBKDF2&nbsp;ERROR:&nbsp;Invalid&nbsp;parameters.&#039;);<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if($key_length&nbsp;&gt;&nbsp;4294967295)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die(&#039;PBKDF2&nbsp;ERROR:&nbsp;Derived&nbsp;key&nbsp;too&nbsp;long.&#039;);<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$hLen&nbsp;=&nbsp;strlen(hash($algorithm,&nbsp;&quot;&quot;,&nbsp;true));<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$numBlocks&nbsp;=&nbsp;(int)ceil((double)$key_length&nbsp;/&nbsp;$hLen);<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$output&nbsp;=&nbsp;&quot;&quot;;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for($i&nbsp;=&nbsp;1;&nbsp;$i&nbsp;&lt;=&nbsp;$numBlocks;&nbsp;$i++)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$output&nbsp;.=&nbsp;pbkdf2_f($password,&nbsp;$salt,&nbsp;$count,&nbsp;$i,&nbsp;$algorithm,&nbsp;$hLen);<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;substr($output,&nbsp;0,&nbsp;$key_length);<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;/*<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;The&nbsp;pseudorandom&nbsp;function&nbsp;used&nbsp;by&nbsp;PBKDF2.<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Definition:&nbsp;https://www.ietf.org/rfc/rfc2898.txt<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/<br />
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;pbkdf2_f($password,&nbsp;$salt,&nbsp;$count,&nbsp;$i,&nbsp;$algorithm,&nbsp;$hLen)<br />
&nbsp;&nbsp;&nbsp;&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//$i&nbsp;encoded&nbsp;as&nbsp;4&nbsp;bytes,&nbsp;big&nbsp;endian.<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$last&nbsp;=&nbsp;$salt&nbsp;.&nbsp;chr(($i&nbsp;&gt;&gt;&nbsp;24)&nbsp;%&nbsp;256)&nbsp;.&nbsp;chr(($i&nbsp;&gt;&gt;&nbsp;16)&nbsp;%&nbsp;256)&nbsp;.&nbsp;chr(($i&nbsp;&gt;&gt;&nbsp;8)&nbsp;%&nbsp;256)&nbsp;.&nbsp;chr($i&nbsp;%&nbsp;256);<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$xorsum&nbsp;=&nbsp;&quot;&quot;;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for($r&nbsp;=&nbsp;0;&nbsp;$r&nbsp;&lt;&nbsp;$count;&nbsp;$r++)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$u&nbsp;=&nbsp;hash_hmac($algorithm,&nbsp;$last,&nbsp;$password,&nbsp;true);<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$last&nbsp;=&nbsp;$u;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(empty($xorsum))<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$xorsum&nbsp;=&nbsp;$u;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for($c&nbsp;=&nbsp;0;&nbsp;$c&nbsp;&lt;&nbsp;$hLen;&nbsp;$c++)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$xorsum[$c]&nbsp;=&nbsp;chr(ord(substr($xorsum,&nbsp;$c,&nbsp;1))&nbsp;^&nbsp;ord(substr($u,&nbsp;$c,&nbsp;1)));<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;$xorsum;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}
</div>
