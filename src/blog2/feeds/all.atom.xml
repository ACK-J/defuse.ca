<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>The Code Files</title><link href="/blog2/" rel="alternate"></link><link href="/blog2/feeds/all.atom.xml" rel="self"></link><id>/blog2/</id><updated>2014-06-10T09:56:00-06:00</updated><entry><title>Switching to Pelican</title><link href="/blog2/switching-to-pelican.html" rel="alternate"></link><updated>2014-06-10T09:56:00-06:00</updated><author><name>Taylor Hornby</name></author><id>tag:/blog2,2014-06-10:switching-to-pelican.html</id><summary type="html">&lt;p&gt;I'm switching this blog to Pelican. That is all.&lt;/p&gt;
</summary><category term="blog"></category><category term="meta"></category></entry><entry><title>How to Maximize X in Your Life</title><link href="/blog2/how-to-maximize-anything-in-your-life.html" rel="alternate"></link><updated>2013-11-01T00:00:00-06:00</updated><author><name>Taylor Hornby</name></author><id>tag:/blog2,2013-11-01:how-to-maximize-anything-in-your-life.html</id><summary type="html">&lt;p&gt;How to maximize X (success, happiness, skill, or whatever) in your life:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Every week, spend at least an hour reviewing what you did the previous week.
Think of what you could have done better to increase X even more. Apply the
things you find to the next week.&lt;/li&gt;
&lt;li&gt;Every month, spend at least an hour reviewing your review process. Are your
weekly reviews making you improve X? Think about how you could make your
review process better. Do you need more time for the weekly reviews? What
other changes to the reviews can you make so they're more effective? Apply
these changes in the next month.&lt;/li&gt;
&lt;li&gt;Every year, spend at least an hour reviewing your monthly review of review
process. Are your monthly reviews improving the effectiveness of your weekly
reviews? How can you make your monthly reviews better? Apply these changes in
the next year.&lt;/li&gt;
&lt;li&gt;Every 5 years, review the yearly reviews in the same way.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you graph y = X(t) as a curve, the days of your life represent actual
increases in the value of X. The weekly reviews represent increases in the slope
(first derivative) of X(t), making it increase faster. The monthly reviews
increases the rate at which the slope of X(t) increases (second derivative). The
yearly reviews increase the rate at which the rate at which the slope is
increasing (third derivative). The 5-year reviews increase the fourth
derivative, and so on, if you wish to apply more levels of review.&lt;/p&gt;
&lt;p&gt;I believe this process to be the best a human being can do to approximate
exponential growth of some property of themselves within their lifetime.&lt;/p&gt;
</summary><category term="life"></category></entry><entry><title>Enabling TLS v1.1 on Firefox 23</title><link href="/blog2/enabling-tls-11-on-firefox-version-23.html" rel="alternate"></link><updated>2013-08-09T00:00:00-06:00</updated><author><name>Taylor Hornby</name></author><id>tag:/blog2,2013-08-09:enabling-tls-11-on-firefox-version-23.html</id><summary type="html">&lt;p&gt;Change the following settings in Firefox's &lt;a class="reference external" href="about:config"&gt;about:config&lt;/a&gt; to enable TLS v1.1.&lt;/p&gt;
&lt;img alt="Enabling TLS 1.1 in Firefox 23" src="https://defuse.ca/images/ff23-tls.png" /&gt;
&lt;p&gt;&lt;strong&gt;Steps&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Open a new tab and type &lt;a class="reference external" href="about:config"&gt;about:config&lt;/a&gt; into the address bar.&lt;/li&gt;
&lt;li&gt;Search for tls.version.&lt;/li&gt;
&lt;li&gt;Set security.tls.version.max to 2. This enables TLS 1.1.&lt;/li&gt;
&lt;li&gt;Set security.tls.version.min to 1. This disables SSL 3.0.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Be aware that setting tls.version.max to 3 will enable TLS v1.2 in a future
release of Firefox, but setting it to 3 in version 23 actually makes it fall
back to using &lt;em&gt;only&lt;/em&gt; TLS 1.0. So for now, set it to 2.&lt;/p&gt;
&lt;p&gt;The image was contributed by &lt;a class="reference external" href="https://twitter.com/voodooKobra"&gt;&amp;#64;voodooKobra&lt;/a&gt;.&lt;/p&gt;
</summary><category term="firefox"></category></entry><entry><title>What is DDoS? (Guest Post)</title><link href="/blog2/what-is-ddos.html" rel="alternate"></link><updated>2013-05-12T00:00:00-06:00</updated><author><name>Breshie</name></author><id>tag:/blog2,2013-05-12:what-is-ddos.html</id><summary type="html">&lt;p&gt;This is a guest post by BreShiE.&lt;/p&gt;
&lt;p&gt;DDoS attacks are becoming more and more frequent in today's world, with any
average person being able to download or purchase such tools from online, public
forums. You may have heard about the self proclaimed hacktivist group
&amp;quot;Anonymous&amp;quot; and their infamous take-downs of websites such as &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Operation_Payback"&gt;MasterCard,
PayPal and The Bank of America&lt;/a&gt;. Well, these websites were taken offline for
a period of time by an attack known as &amp;quot;DDoS&amp;quot;, but what is DDoS?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DDoS&lt;/strong&gt; stands for &lt;strong&gt;Distributed Denial of Service&lt;/strong&gt;. DDoS attacks work by
collecting multiple infected machines or servers with certain scripts, or
malware, intended to send data from the infected server or home connection to
a victims. This means the attacker can overload the victim connection, by
flooding it with loads and loads of dummy data, eventually causing the victim
connection to overload, &amp;quot;knocking&amp;quot; the connection offline and making it
unresponsive. See the below diagram for an example of this:&lt;/p&gt;
&lt;img alt="DDoS diagram" src="/images/breshie-ddos.png" /&gt;
&lt;p&gt;As you can see from the above diagram, the attacker sends a command to the
servers/PCs that are under his/her control, which then send the dummy data to
the victim connection and overloads the connection, making it hard or impossible
for the victim's users to communicate with the victim. There's also what is
known as &amp;quot;DoS&amp;quot; which is often not as strong as a DDoS attack, but if the
attacker is using a server with a strong connection, this attack can still be
devastating. One thing to &lt;strong&gt;note&lt;/strong&gt; would be that there are companies which fight
to prevent this exact attack and that is why you never see big sites like eBay,
YouTube and Google go down. With this &lt;a class="reference external" href="http://www.bbc.co.uk/news/technology-17472447"&gt;huge scare about &amp;quot;hackers being able to
take down the internet&amp;quot;&lt;/a&gt;, it's baloney. The only way it would be possible, is
if the data-centers were to be physically blown up, not DDoS attacks via the
internet.  If you wish to know more on this subject, visit &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Distributed_denial_of_service#Distributed_attack"&gt;Wikipedia's page on
DDoS&lt;/a&gt;&lt;/p&gt;
</summary><category term="ddos"></category></entry><entry><title>Switching Desktops/Workspaces with Mouse Buttons</title><link href="/blog2/linux-switch-virtual-desktop-workspace-mouse-button.html" rel="alternate"></link><updated>2013-04-29T00:00:00-06:00</updated><author><name>Taylor Hornby</name></author><id>tag:/blog2,2013-04-29:linux-switch-virtual-desktop-workspace-mouse-button.html</id><summary type="html">&lt;p&gt;I had to uninstall compiz today, and I absolutely can't live without being able
to switch virtual desktops (also known as workspaces) with the buttons on the
side of my mouse. Here's how you do it:&lt;/p&gt;
&lt;p&gt;First, install &lt;strong&gt;xbindkeys&lt;/strong&gt; and &lt;strong&gt;xdotool&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
apt-get install xbindkeys xdotool
&lt;/pre&gt;
&lt;p&gt;Then create a &lt;strong&gt;.xbindkeysrc&lt;/strong&gt; file in your home folder:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
vim ~/.xbindkeysrc
&lt;/pre&gt;
&lt;p&gt;Into this file, put the following:&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
# -- Move Right --
# This is the general command that works with any number of workspaces:
# &amp;quot;xdotool set_desktop $(expr $(expr $(xdotool get_desktop) + 1) % $(xdotool get_num_desktops))&amp;quot;
# This is the optimized command for 5 workspaces:
&amp;quot;xdotool set_desktop $(expr $(expr $(xdotool get_desktop) + 1) % 5)&amp;quot;
    b:8

# -- Move Left --
# This is the general command that works with any number of workspaces:
# &amp;quot;xdotool set_desktop $(expr $(expr $(xdotool get_desktop) + $(expr $(xdotool get_num_desktops) - 1)) % $(xdotool get_num_desktops))&amp;quot;
# This is the optimized command for 5 workspaces:
&amp;quot;xdotool set_desktop $(expr $(expr $(xdotool get_desktop) + 4) % 5)&amp;quot;
    b:9
&lt;/pre&gt;
&lt;p&gt;In the above config, replace &amp;quot;8&amp;quot; with the number of the button you want to use
to move right, and &amp;quot;9&amp;quot; with the number of the button you want to use to move
left. If you don't know what the button numbers are, run &amp;lt;b&amp;gt;xev&amp;lt;/b&amp;gt;, press the
one you want while hovering your mouse over the window, and you'll see it in the
output.&lt;/p&gt;
&lt;p&gt;The command that's uncommented works with a 5-workspace setup. If you want it to
work with X desktops either comment that one out and uncomment the general
command, or replace &amp;quot;5&amp;quot; with X and &amp;quot;4&amp;quot; with X - 1.&lt;/p&gt;
&lt;p&gt;Then add &lt;strong&gt;xbindkeys&lt;/strong&gt; (no arguments) to your startup applications. If you want windows to &amp;quot;edge switch&amp;quot; (switch workspaces when you drag them across the side of your screen), look at &lt;a class="reference external" href="http://lifehacker.com/263508/add-screen-actions-with-brightside"&gt;brightside&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note: &lt;a class="reference external" href="http://forum.pinguyos.com/Thread-HOWTO-Mouse-buttons-to-change-workspaces-in-gnome-shell"&gt;HOWTO: Mouse buttons to change workspaces in gnome-shell&lt;/a&gt; helped me figure out how to do this.&lt;/p&gt;
</summary><category term="xbindkeys"></category></entry><entry><title>[Ruby] Password Training Script</title><link href="/blog2/ruby-password-training-script.html" rel="alternate"></link><updated>2013-03-28T00:00:00-06:00</updated><author><name>Taylor Hornby</name></author><id>tag:/blog2,2013-03-28:ruby-password-training-script.html</id><summary type="html">&lt;p&gt;This is a simple Ruby script that helps you memorize a password by making you
type it over and over again. It first breaks the password into chunks of
4 characters, helps you to memorize each chunk, then every consecutive pair of
chunks, then every consecutive triple... and so on, until you're typing the
entire password from memory.&lt;/p&gt;
&lt;p&gt;I was able to completely memorize a 131-bit password (20 printable ASCII
characters, completely random) in about 20 minutes using this script.&lt;/p&gt;
&lt;p&gt;You'll need the 'highline' gem to run this script: &lt;tt class="docutils literal"&gt;gem install highline&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="c1"&gt;# Ruby Password Trainer&lt;/span&gt;

&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'highline/import'&lt;/span&gt;

&lt;span class="no"&gt;TIMES_TO_TYPE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="no"&gt;CHUNK_SIZE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;This is a script that helps you memorize a password.&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;WARNING: Make sure nobody is watching you while you use this script!&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Your password: &amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;gets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chop&lt;/span&gt;
&lt;span class="n"&gt;password_chunks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each_slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="no"&gt;CHUNK_SIZE&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_a&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;gets_noecho&lt;/span&gt;
  &lt;span class="n"&gt;ask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;clear&lt;/span&gt;
  &lt;span class="nb"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;clear&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;continue?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;round&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Round &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;round&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; finished. Again? [Y/n] &amp;quot;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;gets&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/^y$/i&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;chunks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_chunks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password_chunks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;password_chunks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each_cons&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;num_chunks&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;portion&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;part&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;portion&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Training&lt;/span&gt;
    &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;TIMES_TO_TYPE&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
      &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Type &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;  &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; times...&amp;quot;&lt;/span&gt;
      &lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gets_noecho&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;part&lt;/span&gt;
        &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;WRONG! You typed &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="c1"&gt;# Recall test&lt;/span&gt;
    &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;TIMES_TO_TYPE&lt;/span&gt;
    &lt;span class="n"&gt;wrong&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;wrong&lt;/span&gt;
      &lt;span class="n"&gt;clear&lt;/span&gt;
      &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Type the same thing &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; times...&amp;quot;&lt;/span&gt;
      &lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gets_noecho&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;part&lt;/span&gt;
        &lt;span class="n"&gt;wrong&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;gt;&amp;gt; You got &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;TIMES_TO_TYPE&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;TIMES_TO_TYPE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; right.&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;wrong&lt;/span&gt;
      &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Try again...&amp;quot;&lt;/span&gt;
      &lt;span class="k"&gt;redo&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;round&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;begin&lt;/span&gt;
  &lt;span class="n"&gt;clear&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;password_chunks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;num_chunks&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;chunks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_chunks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password_chunks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="n"&gt;round&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;continue?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;round&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
</summary><category term="ruby"></category><category term="passwords"></category></entry><entry><title>[LaTeX] Typesetting Premise and Conclusion Form Arguments</title><link href="/blog2/latex-premise-conclusion-form-arguments.html" rel="alternate"></link><updated>2013-02-23T00:00:00-07:00</updated><author><name>Taylor Hornby</name></author><id>tag:/blog2,2013-02-23:latex-premise-conclusion-form-arguments.html</id><summary type="html">&lt;p&gt;This is the easiest way I have found to typeset premise and conclusion style
arguments in LaTeX. First, add this to your preamble:&lt;/p&gt;
&lt;pre class="code latex literal-block"&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;amssymb&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Then use something like this to typeset the argument:&lt;/p&gt;
&lt;pre class="code latex literal-block"&gt;
&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;itemize&lt;span class="nb"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;\item&lt;/span&gt;&lt;span class="na"&gt;[1.]&lt;/span&gt; Premise One.
    &lt;span class="k"&gt;\item&lt;/span&gt;&lt;span class="na"&gt;[2.]&lt;/span&gt; Premise Two.
    &lt;span class="k"&gt;\item&lt;/span&gt;&lt;span class="na"&gt;[3.]&lt;/span&gt; Premise Three.
    &lt;span class="k"&gt;\item&lt;/span&gt;&lt;span class="na"&gt;[$\therefore$]&lt;/span&gt; Therefore, Your Conclusion.
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;itemize&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;
</summary><category term="latex"></category></entry><entry><title>[Ruby] Genetic String Evolver</title><link href="/blog2/genetic-string-evolver-in-ruby.html" rel="alternate"></link><updated>2013-02-19T00:00:00-07:00</updated><author><name>Taylor Hornby</name></author><id>tag:/blog2,2013-02-19:genetic-string-evolver-in-ruby.html</id><summary type="html">&lt;p&gt;Inspired by &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Weasel_program"&gt;Richard Dawkins' weasel program&lt;/a&gt;, this is a genetic algorithm,
written in Ruby, to evolve the same &amp;quot;METHINKS IT IS LIKE A WEASEL&amp;quot; string. It's
really fun to experiment with changing the probability constants (mutation,
reproduction) and the algorithm in &lt;tt class="docutils literal"&gt;Evolver#advance&lt;/tt&gt;, which advances the
population of strings to the next generation. Have fun!&lt;/p&gt;
&lt;p&gt;The default algorithm works as follows:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Initialize a population of random strings.&lt;/li&gt;
&lt;li&gt;Mutate each string with probability 'mutation_probability'.&lt;/li&gt;
&lt;li&gt;Breed each string with another random string from the population with
probability 'breed_probability', keeping the newborn population separate.&lt;/li&gt;
&lt;li&gt;Kill random newborns until the number of newborns is less than 1/4 of the
size of the main population.&lt;/li&gt;
&lt;li&gt;Select a random half of the main population and replace its weakest (furthest
from the target) members with the remaining newborns.&lt;/li&gt;
&lt;li&gt;Go back to Step 2.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In about 5000-10000 generations, the strongest member of the population
stabilizes to the target string.&lt;/p&gt;
&lt;p&gt;The same algorithm can be applied to other problems, like finding the maximum of
a mathematical function, by just modifying &lt;tt class="docutils literal"&gt;Weasel.rb&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="section" id="sample-output"&gt;
&lt;h2&gt;Sample Output&lt;/h2&gt;
&lt;p&gt;The left column is the population's strongest member. The right column is the
population's weakest member.&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
YAPXMLHQFORHPPNVWF DISTEBZEK -- vs. -- YZLHUURLMPKITAP ZYVTTSIZZCQV (Gen: 0)
YAPXMLHQFORHPPNVWF DISTEBZEK -- vs. -- CXZWQCVCUAZFDOUSZNRCXDQPNENR (Gen: 1)
YAEBXJFACES FVUTYWTLATTIACDY -- vs. -- CXZWQCVCUAZFDOUSZNRCXDQPNENR (Gen: 2)
YAEBXJFACES FVUTYWTLATTIACDY -- vs. -- J ICBDLWUGASSNRS YENZDLVBJ V (Gen: 3)
YAEBXJFACES FVUTYWTLATTIACDY -- vs. -- NJQPSUPJUBEUQGNEBPRCMHIVBJ V (Gen: 4)
YAEBXJFACES FVUTYWTLATTIACDY -- vs. -- NJQPSUPJUBEUQGNEBPRCMHIVBJ V (Gen: 5)
YAEBXJFACES FVUTYWTLATTIACDY -- vs. --  RQPSUPJUBEUQWSFJTJ OWHRTKIM (Gen: 6)
MDLDIGLMBUJPTV LWEC W FMNINL -- vs. -- ZXZNNKDUGWIVLKARQLMDKCIZ FGW (Gen: 7)
MDLDIGLMBUJPTV LWEC W FMNINL -- vs. -- ZXZNNKDUGWIVLKARQLMDKCIZ FGW (Gen: 8)
...
MDPXKNIS MVHXZ LHCC W ODACEL -- vs. -- MDLDMFQS MVHCZ LHCCGW IQACDY (Gen: 100)
MDPXKNIS MVHXZ LHCC W ODACEL -- vs. -- MDJDIFVS M DAS HHXC W TSACEL (Gen: 101)
MDPXKNIS MVHXZ LHCC W ODACEL -- vs. -- MDJDMNQS MVGXZ LHCC W FQACDL (Gen: 102)
MADIMNQS MVDXZ LHCE W ODACEL -- vs. -- MDJDMNQS MVGXZ LHEC W FMACIL (Gen: 103)
MDPXKNQS MVDAS HHCE W ODACEL -- vs. -- MDJDMNQS MVGXZ LHEC W FMACIL (Gen: 104)
MDPXKNQS MVDAS HHCE W ODACEL -- vs. -- MAPXYNCM MVHXZ LHTC D DQACIL (Gen: 105)
...
METHINIS ITHIS LHKE A VMAQEL -- vs. -- METHINIS IVHWS LHKEXA VMAQEL (Gen: 400)
METHINIS ITHIS LHKE A VMAQEL -- vs. -- METHINIS RVHIS LHKEEA VMAQEL (Gen: 401)
METHINIS ITHIS LHKE A VMAQEL -- vs. -- METHINIS RVHIS LHKEEA VMAQEL (Gen: 402)
METHINIS ITHIS LHKE A VMACEL -- vs. -- METHINIS IVHWS LHKEXA VMAQEL (Gen: 403)
METHINIS ITHIS LHKE A VMAQEL -- vs. -- METHFNIS RVHIS LHKE A VMAQEL (Gen: 404)
METHINIS ITHIS LHKE A VMAQEL -- vs. -- METHFNIS RRHIS LHKE A VMAQEL (Gen: 405)
...
METHINIS IV IS LHKE A WMAQEL -- vs. -- MVTHINIS IV IS QHKE AMVMAQEL (Gen: 800)
METHINIS IV IS LHKE A WMAQEL -- vs. -- METUINIS IV IS LHKE AMVMEQEL (Gen: 801)
METHINIS IV IS LHKE A WMAQEL -- vs. -- METUINIS IV IS LHKE AMVMEQEL (Gen: 802)
METHINIS IV IS LHKE A WMAQEL -- vs. -- METUINIS IV IS LHKE AMVMEQEL (Gen: 803)
METHINIS IV IS LHKE A WMAQEL -- vs. -- METHINIS IVQISKLHKE A VMAQEL (Gen: 804)
METHINIS IV IS LHKE A WMAQEL -- vs. -- METCINIS IV RS LHKK A WMAQEL (Gen: 805)
...
METHINKS IT IS LIKE A WEAWEL -- vs. -- ROTHINKS IT IS LIKE A WEAHEL (Gen: 5106)
METHINKS IT IS LIKE A WEAWEL -- vs. -- MOTHINKS ITSIS VIKE A WEAWEL (Gen: 5107)
METHINKS IT IS LIKE A WEAWEL -- vs. -- MOTHINKS ITSIS VIKE A WEAWEL (Gen: 5108)
METHINKS IT IS LIKE A WEAWEL -- vs. -- METHINKSOIT IS LIKE A WEAWEL (Gen: 5109)
METHINKS IT IS LIKE A WEASEL -- vs. -- METHINKSOIT IS LIKE A WEAWEL (Gen: 5110)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="main-rb"&gt;
&lt;h2&gt;Main.rb&lt;/h2&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'./Evolver.rb'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'./Weasel.rb'&lt;/span&gt;

&lt;span class="n"&gt;evolver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Evolver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="no"&gt;Weasel&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;evolver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;

&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;evolver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; -- vs. -- &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;evolver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;worst&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; (Gen: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;) &lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;evolver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;advance&lt;/span&gt;
  &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="evolver-rb"&gt;
&lt;h2&gt;Evolver.rb&lt;/h2&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="c1"&gt;# WARNING: I have never even read `On the Origin of Species` so do not mistake&lt;/span&gt;
&lt;span class="c1"&gt;# this horrible code to be anything like what happens in nature.&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Evolver&lt;/span&gt;

  &lt;span class="kp"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:population&lt;/span&gt;
  &lt;span class="kp"&gt;attr_accessor&lt;/span&gt; &lt;span class="ss"&gt;:population_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:mutation_probability&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:breed_probability&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;klass&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;&amp;#64;entity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;klass&lt;/span&gt;
    &lt;span class="vi"&gt;&amp;#64;population&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;
    &lt;span class="vi"&gt;&amp;#64;population_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
    &lt;span class="vi"&gt;&amp;#64;mutation_probability&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mo"&gt;07&lt;/span&gt;
    &lt;span class="vi"&gt;&amp;#64;breed_probability&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;
    &lt;span class="vi"&gt;&amp;#64;population_size&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="vi"&gt;&amp;#64;population&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="vi"&gt;&amp;#64;entity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;advance&lt;/span&gt;
    &lt;span class="vi"&gt;&amp;#64;population&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="vi"&gt;&amp;#64;mutation_probability&lt;/span&gt;
        &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mutate&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;newborns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;
    &lt;span class="vi"&gt;&amp;#64;population&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="vi"&gt;&amp;#64;breed_probability&lt;/span&gt;
        &lt;span class="n"&gt;newborns&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="vi"&gt;&amp;#64;population&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;population&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Limit the number of newborns to at most 1/4 of the population size.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;newborns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="vi"&gt;&amp;#64;population&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;
      &lt;span class="n"&gt;newborns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shuffle!&lt;/span&gt;
      &lt;span class="n"&gt;newborns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newborns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="vi"&gt;&amp;#64;population&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Select a random half of the population to be candidates for dying.&lt;/span&gt;
    &lt;span class="n"&gt;killed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;&amp;#64;population&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="vi"&gt;&amp;#64;population&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Sort them by goodness value in increasing order.&lt;/span&gt;
    &lt;span class="n"&gt;killed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort!&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;goodness&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;goodness&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;goodness&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;goodness&lt;/span&gt;
        &lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="mi"&gt;0&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Replace the weakest death candidates with the newborns.&lt;/span&gt;
    &lt;span class="n"&gt;newborns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each_with_index&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;subj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;&amp;#64;population&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;killed&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;&amp;#64;population&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subj&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;best&lt;/span&gt;
    &lt;span class="vi"&gt;&amp;#64;population&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inject&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;goodness&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;goodness&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;worst&lt;/span&gt;
    &lt;span class="vi"&gt;&amp;#64;population&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inject&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;goodness&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;goodness&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="weasel-rb"&gt;
&lt;h2&gt;Weasel.rb&lt;/h2&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Weasel&lt;/span&gt;
  &lt;span class="kp"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:str&lt;/span&gt;

  &lt;span class="no"&gt;ALPHABET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ &amp;quot;&lt;/span&gt;
  &lt;span class="no"&gt;TARGET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;METHINKS IT IS LIKE A WEASEL&amp;quot;&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;random&lt;/span&gt;
    &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="no"&gt;TARGET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ALPHABET&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ALPHABET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;Weasel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;&amp;#64;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mutate&lt;/span&gt;
    &lt;span class="vi"&gt;&amp;#64;str&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;&amp;#64;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ALPHABET&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ALPHABET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;organism&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;split&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;&amp;#64;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;front&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;&amp;#64;str&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;back&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;organism&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;split&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;organism&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;Weasel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;front&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;back&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;goodness&lt;/span&gt;
    &lt;span class="n"&gt;hamming&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="vi"&gt;&amp;#64;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;hamming&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;&amp;#64;str&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;ord&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="no"&gt;TARGET&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;hamming&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;to_s&lt;/span&gt;
    &lt;span class="vi"&gt;&amp;#64;str&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
</summary><category term="evolution"></category></entry><entry><title>Windows Magnifier Hack</title><link href="/blog2/windows-magnifier-password-reset.rst.html" rel="alternate"></link><updated>2013-02-19T00:00:00-07:00</updated><author><name>Taylor Hornby</name></author><id>tag:/blog2,2013-02-19:windows-magnifier-password-reset.rst.html</id><summary type="html">&lt;p&gt;Steps to reset a Windows account password given physical access to the box:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Boot a Linux live cd and mount C:somewhere.&lt;/li&gt;
&lt;li&gt;Find magnifier.exe (somewhere in System32) and replace it with cmd.exe.&lt;/li&gt;
&lt;li&gt;Boot to the Windows login screen.&lt;/li&gt;
&lt;li&gt;Press WinKey + U&lt;/li&gt;
&lt;li&gt;Start the magnifier, which should run cmd.exe.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://support.microsoft.com/kb/149427"&gt;Change the password in the Command Prompt&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that this will destroy all data encrypted with &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Encrypting_File_System"&gt;EFS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I'm not sure who thought of this first, but if I knew, I would credit them here.&lt;/p&gt;
</summary><category term="windows"></category></entry><entry><title>Factorization Correlation Experimentation Tool</title><link href="/blog2/factorization-genetic-algorithm-correlation.html" rel="alternate"></link><updated>2013-01-25T00:00:00-07:00</updated><author><name>Taylor Hornby</name></author><id>tag:/blog2,2013-01-25:factorization-genetic-algorithm-correlation.html</id><summary type="html">&lt;p&gt;Here's a Ruby script to experiment with correlations that may be useful in
developing a genetic (evolutionary) algorithm for factoring the product of two
primes. The comments explain it:&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="c1"&gt;#!/usr/bin/env ruby&lt;/span&gt;
&lt;span class="c1"&gt;# Let C = F1 * F2, where F1 and F2 are primes.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# This script gives a visual aid to help determine if the value of some function&lt;/span&gt;
&lt;span class="c1"&gt;# (specified by the user) on a test integer is correlated with the test&lt;/span&gt;
&lt;span class="c1"&gt;# integer's hamming distance from min(F1, F2).&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# If such a correlation exists, it may be possible to use that function to&lt;/span&gt;
&lt;span class="c1"&gt;# calculate the 'fitness' of test integers in a genetic (evolutionary) algorithm&lt;/span&gt;
&lt;span class="c1"&gt;# for factoring C.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Of course the function must be efficiently computable without knowing the&lt;/span&gt;
&lt;span class="c1"&gt;# factorization of C.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Set the function by modifying the 'function' method below. Set the F1 and F2&lt;/span&gt;
&lt;span class="c1"&gt;# by modifying the 'F1' and 'F2' variables below. C is calculated from F1 and&lt;/span&gt;
&lt;span class="c1"&gt;# F2.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Some interesting functions are:&lt;/span&gt;
&lt;span class="c1"&gt;#   - The hamming distance between C and the test integer.&lt;/span&gt;

&lt;span class="c1"&gt;# If you don't have the gnuplot gem, run `gem install gnuplot`&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'gnuplot'&lt;/span&gt;

&lt;span class="no"&gt;F1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8831&lt;/span&gt;
&lt;span class="no"&gt;F2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;12479&lt;/span&gt;

&lt;span class="c1"&gt;# Set this to true to make the multiplicity of points visible by adding random&lt;/span&gt;
&lt;span class="c1"&gt;# variations in their horizontal position.&lt;/span&gt;
&lt;span class="no"&gt;JITTER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;

&lt;span class="no"&gt;F_DESC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;HammingDistance(test, C)&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;composite&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;potentialFactor&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;hammingDistance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;composite&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;potentialFactor&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# ----------------------------------------------------------------------------&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hammingDistance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;

&lt;span class="n"&gt;compareFactor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="no"&gt;F1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;F2&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;
&lt;span class="n"&gt;composite&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;F1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="no"&gt;F2&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="no"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;composite&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ceil&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;composite&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;hammingDistance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;compareFactor&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;100_000&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="ss"&gt;Gnuplot&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="ss"&gt;:open&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;gp&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="ss"&gt;Gnuplot&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="ss"&gt;:Plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;gp&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;C = F1 * F2 where F1 and F2 are prime. &lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;n&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;C = &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;F1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="no"&gt;F2&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;; F1 = &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;F1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;; F2 = &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;F2&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ylabel&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;HammingDistance(test, min(F1, F2))&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xlabel&lt;/span&gt; &lt;span class="no"&gt;F_DESC&lt;/span&gt;
    &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xrange&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[0:]&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yrange&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[0:]&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;JITTER&lt;/span&gt;
      &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="ss"&gt;Gnuplot&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="ss"&gt;:DataSet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;JITTER&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dots&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;points&amp;quot;&lt;/span&gt;
      &lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;notitle&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
</summary><category term="factorization"></category></entry><entry><title>Vim: Make Rainbow Parentheses Work in PHP</title><link href="/blog2/vim-rainbow-parentheses-work-in-php.html" rel="alternate"></link><updated>2012-12-22T00:00:00-07:00</updated><author><name>Taylor Hornby</name></author><id>tag:/blog2,2012-12-22:vim-rainbow-parentheses-work-in-php.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt; What I propose here doesn't actually fix it, it still fails when
there's a greater-than sign inside an if statement. I have spent over 8 hours
trying to get this to work and that is too much, so I am giving up. If you find
a solution, please email it to me.&lt;/p&gt;
&lt;p&gt;I use this script to get rainbow parentheses in Vim:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/kien/rainbow_parentheses.vim"&gt;https://github.com/kien/rainbow_parentheses.vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.vim.org/scripts/script.php?script_id=3772"&gt;http://www.vim.org/scripts/script.php?script_id=3772&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It colors nested parentheses like this:&lt;/p&gt;
&lt;img alt="Vim Rainbow Parentheses" src="https://defuse.ca/images/rainbow.png" /&gt;
&lt;p&gt;Unfortunately, it doesn't work with PHP, because the PHP syntax file only allows
its own syntax regions to appear inside the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;lt;?php&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;?&amp;gt;&lt;/span&gt;&lt;/tt&gt; tags. The fix
is simple:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Copy the 'system' php syntax file (usually
&lt;tt class="docutils literal"&gt;/usr/local/share/vim/vim73/syntax/php.vim&lt;/tt&gt;) to your personal
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.vim/syntax&lt;/span&gt;&lt;/tt&gt; folder (create it if it does not exist).&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Edit &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.vim/syntax/php.vim&lt;/span&gt;&lt;/tt&gt;, find the line that starts with &lt;tt class="docutils literal"&gt;syn cluster
phpClTop&lt;/tt&gt; and add &lt;tt class="docutils literal"&gt;level16&lt;/tt&gt; to the end of the 'contains' list on that
line. If you have set &lt;tt class="docutils literal"&gt;g:rbpt_max&lt;/tt&gt; in your .vimrc, then you will need to
change the &amp;quot;16&amp;quot; to that value.&lt;/li&gt;
&lt;/ol&gt;
</summary><category term="vim"></category></entry><entry><title>Encrypted Automatic Backups with Public Key Cryptography</title><link href="/blog2/encrypted-automatic-backups-with-pkc.html" rel="alternate"></link><updated>2012-12-16T00:00:00-07:00</updated><author><name>Taylor Hornby</name></author><id>tag:/blog2,2012-12-16:encrypted-automatic-backups-with-pkc.html</id><summary type="html">&lt;p&gt;Here's how to do encrypted automated backups without having to store the
password in the backup script. The script should be self-explanatory (after all,
it is 50 lines of comments for just one real line of code).&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c"&gt;#!/bin/bash
# File name: backup.sh
# This script automates the process of encrypting a directory for backup.
#
# Instead of using normal password encryption, we take advantage of public-key
# cryptography so that you don't need to include the password in the encryption
# script. This is required if you want to have files automatically encrypted
# with a password remembered only by your biological brain.
#
# It requires a bit of setup:
#
# 1. Generate a public/private key pair (as the user that will run this script):
#   - Run,
#      $ gpg --s2k-cipher-algo AES256 --s2k-digest-algo SHA512 --s2k-mode 3  \
#        --s2k-count 65011712 --gen-key
#   - Choose the &amp;quot;RSA and RSA&amp;quot; key type.
#   - Choose 4096 (or greater) as the key size.
#   - Enter an expiration time of 0 (never expires)
#   - Give the key a name (enter 'invalid&amp;#64;invalid.invalid' for the email).
#   - Enter a password. This is the password that you will need to decrypt the
#     backup files.
#
# 2. Modify the constants in this script:
#   - DIRECTORY:
#       Set this to the folder you want to automatically encrypt.
#   - GPG_RECIPIENT
#       Set this to the ID of the public key generated in step 1.
#       You can find the ID by running
#           $ gpg --list-keys
#       It is the 8-digit hexadecimal number on the 'pub' line corresponding to
#       your key.
#   - OUTPUT_FILE
#       Where to put the encrypted GPG file.
#       If the file already exists, it will be overwritten.
#
# 3. Backup your public key and (encrypted) private key.
#   To decrypt the file that this script generates, you will need the private
#   key and the password you gave in step 1, so it is a good idea to make
#   a backup of your key pair.
#
#   To backup your public key:
#       $ gpg -a --export NAME &amp;gt; public_key.txt
#   To backup your private key:
#       $ gpg -a --export-secret-keys NAME &amp;gt; private_key.txt
#   ...where NAME is part of the name you gave in step 1.
#
#   Because the private key is encrypted with the password, it is safe to store
#   the key backups with the backup file (or even publish them).
#
# DECRYPTING:
#   To decrypt the file generated by this script, run:
#       $ gpg -d -o decrypted.tar &amp;lt;backup file&amp;gt;
#       $ tar xvf decrypted.tar
&lt;/span&gt;
&lt;span class="nb"&gt;readonly &lt;/span&gt;&lt;span class="nv"&gt;DIRECTORY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;./testing                    &lt;span class="c"&gt;# Directory to encrypt.
&lt;/span&gt;&lt;span class="nb"&gt;readonly &lt;/span&gt;&lt;span class="nv"&gt;GPG_RECIPIENT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;EAD91475                 &lt;span class="c"&gt;# Public key ID.
&lt;/span&gt;&lt;span class="nb"&gt;readonly &lt;/span&gt;&lt;span class="nv"&gt;OUTPUT_FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/tmp/encrypted.tar.gpg     &lt;span class="c"&gt;# Encrypted file path.
&lt;/span&gt;
tar cf - -C &lt;span class="nv"&gt;$DIRECTORY&lt;/span&gt; . | &lt;span class="se"&gt;\
&lt;/span&gt;    gpg -z 9 --batch --yes --encrypt --recipient &lt;span class="nv"&gt;$GPG_RECIPIENT&lt;/span&gt; --output &lt;span class="nv"&gt;$OUTPUT_FILE&lt;/span&gt;
&lt;/pre&gt;
</summary><category term="backups"></category></entry><entry><title>Increasing Collisions in Password Hashing</title><link href="/blog2/increasing-collisions-in-password-hashing.html" rel="alternate"></link><updated>2012-12-11T00:00:00-07:00</updated><author><name>Taylor Hornby</name></author><id>tag:/blog2,2012-12-11:increasing-collisions-in-password-hashing.html</id><summary type="html">&lt;p&gt;With this post I will try to show how, in a theoretical scenario, deliberately
weakening the collision resistance of a password hash function can increase
security. This is by no means a formal proof.&lt;/p&gt;
&lt;p&gt;Suppose Alice has an account on two computer systems &lt;em&gt;X&lt;/em&gt; and &lt;em&gt;Y&lt;/em&gt;. She uses the
same password on both systems.&lt;/p&gt;
&lt;p&gt;Suppose both systems implement the following password hashing scheme: Let &lt;em&gt;t&lt;/em&gt; be
some positive integer. Given a password &lt;em&gt;P&lt;/em&gt;, compute the entropy of the password
&lt;em&gt;H(P)&lt;/em&gt;. Create and store a salted &lt;em&gt;B&lt;/em&gt;-bit hash of &lt;em&gt;P&lt;/em&gt; where &lt;em&gt;B = H(P) - lg(t)&lt;/em&gt;.
To verify a password, wait for &lt;em&gt;t&lt;/em&gt; units of time then check the hash in the
usual manner. Here, the entropy of the password is the logarithm base two of the
number of guesses it will take an adversary to guess the exact password. Also
suppose that it takes one unit of time to compute a hash.&lt;/p&gt;
&lt;p&gt;I claim that using this scheme, Alice's accounts are no less secure than if we
used 256-bit hashes (if &lt;em&gt;H(P) &amp;lt; 256&lt;/em&gt;), and that if System &lt;em&gt;X&lt;/em&gt; gets compromised,
then her account on System &lt;em&gt;Y&lt;/em&gt; is more secure than if we used 256-bit hashes.&lt;/p&gt;
&lt;p&gt;To see why, note two things:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The probability of any random string &lt;em&gt;S&lt;/em&gt; having the same hash as Alice's
password &lt;em&gt;P&lt;/em&gt; is &lt;em&gt;1/(2^B)&lt;/em&gt;. So if Mallory tries to guess Alice's password
using an online attack, it will take about &lt;em&gt;2^B&lt;/em&gt; guesses, so about &lt;em&gt;2^B * t&lt;/em&gt;
time. So the effective security against an online attack is &lt;em&gt;B + lg(t)&lt;/em&gt;. By
the construction, &lt;em&gt;B + lg(t) = H(P)&lt;/em&gt; so this is no easier than guessing &lt;em&gt;P&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Suppose Mallory roots System &lt;em&gt;X&lt;/em&gt; and gets the &lt;em&gt;B&lt;/em&gt;-bit hash of Alice's
password. It takes Mallory about &lt;em&gt;2^B&lt;/em&gt; guesses to find a preimage. But since
&lt;em&gt;B = H(P) - lg(t)&lt;/em&gt;, Mallory will find about &lt;em&gt;t&lt;/em&gt; collisions when she performs
the same search she would if it was instead a 256-bit hash (this is not at
all a formal argument, but hopefully you see the idea behind it).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By supposition, Mallory has rooted System &lt;em&gt;X&lt;/em&gt;, so there is no point trying to
secure Alice's account on &lt;em&gt;X&lt;/em&gt; anymore. All that remains is the security of
Alice's account on system &lt;em&gt;Y&lt;/em&gt;. This breaks down if Mallory can get read-only
access to the hash database without rooting... but suppose the root password is
stored in plain text in the hash database ;) .&lt;/p&gt;
&lt;p&gt;Because System &lt;em&gt;Y&lt;/em&gt; is using different salts, it is unlikely that any of the &lt;em&gt;t&lt;/em&gt;
collisions Mallory found, except &lt;em&gt;P&lt;/em&gt; itself, can be used to authenticate as
Alice to System &lt;em&gt;Y&lt;/em&gt; (reader: double check this). So Mallory's best option is to
try authenticating to System &lt;em&gt;Y&lt;/em&gt; as Alice using the &lt;em&gt;t&lt;/em&gt; collisions as passwords
guesses, since she knows &lt;em&gt;P&lt;/em&gt; is one of those &lt;em&gt;t&lt;/em&gt; collisions, and by construction
&lt;em&gt;lg(t) &amp;lt; H(P)&lt;/em&gt;. This will take &lt;em&gt;t * t&lt;/em&gt; time, for an effective security of &lt;em&gt;2
* lg(t)&lt;/em&gt; bits.&lt;/p&gt;
&lt;p&gt;If, instead, System &lt;em&gt;X&lt;/em&gt; was using standard 256-bit hashes, Mallory would have
found the exact &lt;em&gt;P&lt;/em&gt; and could get into System &lt;em&gt;Y&lt;/em&gt; on the first try. Using this
scheme it takes about &lt;em&gt;t&lt;/em&gt; tries. So by weakening the hash, Alice's account on
System &lt;em&gt;Y&lt;/em&gt; is more secure than it would have been had the hash not been
weakened.&lt;/p&gt;
&lt;p&gt;Of course, this system is impractical, since it assumes knowledge of how Mallory
would guess &lt;em&gt;P&lt;/em&gt;, and thus the entropy of &lt;em&gt;P&lt;/em&gt;. It also assumes that if Alice's
hash on System &lt;em&gt;X&lt;/em&gt; gets compromised, then the security of her account on &lt;em&gt;X&lt;/em&gt; no
longer matters at all, which is obviously not always the case. It is
nevertheless interesting to see how the altruism of the compromised system can
increase the security of Alice's account on the other system.&lt;/p&gt;
&lt;p&gt;Another problem is that the user must wait &lt;em&gt;t&lt;/em&gt; units of time when logging in, so
in practice there would be tradeoff between security and log-in wait time.
Locking the accounts after significantly less than &lt;em&gt;t&lt;/em&gt; attempts might be
a better approach.&lt;/p&gt;
&lt;p&gt;It doesn't look like it can be made any better than this, since if you decrease
B any further, finding collisions with an online attack becomes easier than
guessing P, but it is still an online (thus detectable, stoppable) attack so it
might still be harder. I would guess that the wait time &lt;em&gt;t&lt;/em&gt; would be better
spent computing iterations of PBKDF2 or similar.&lt;/p&gt;
</summary><category term="passwords"></category><category term="hashing"></category></entry><entry><title>Why Unsafe State != Deadlock</title><link href="/blog2/why-unsafe-state-deadlock.html" rel="alternate"></link><updated>2012-12-10T00:00:00-07:00</updated><author><name>Taylor Hornby</name></author><id>tag:/blog2,2012-12-10:why-unsafe-state-deadlock.html</id><summary type="html">&lt;p&gt;You have a list of processes and a list of resources, and for each process you
have:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The number of each resource they will &lt;em&gt;ever&lt;/em&gt; need at once.&lt;/li&gt;
&lt;li&gt;The number of each resource they are currently allocated.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When a process makes a request for a resource, you only allocate the resource if
allocating the resource does not put the system into an &lt;em&gt;unsafe state&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;What is an unsafe state?&lt;/p&gt;
&lt;p&gt;A system is in a safe state &lt;em&gt;only if&lt;/em&gt; there exists an allocation sequence that
allows the processes to finish executing. Equivalently, if the system is in
a safe state, then there exists an allocation sequence that allows the processes
to finish executing. By contrapositive, if there is no allocation sequence that
allows the processes to finish executing, then the system is in an unsafe state.&lt;/p&gt;
&lt;p&gt;This is &lt;em&gt;not&lt;/em&gt; equivalent to the converse: &amp;quot;If the system is in an unsafe state,
then there is no allocation sequence that allows the processes to finish
executing.&amp;quot;&lt;/p&gt;
&lt;p&gt;So how can a system be in an unsafe state but have an allocation sequence that
allows all processes to finish executing? Remember the assumption that the
banker's algorithm makes: It assumes all processes will request &lt;em&gt;all&lt;/em&gt; resources
they would &lt;em&gt;ever&lt;/em&gt; need at once, then terminate, releasing all of the resources
they just requested and the ones they held. The assumption that can be incorrect
is that processes request &lt;em&gt;all&lt;/em&gt; resources they will ever need. There might not
be an allocation sequence that allows all the processes to finish executing if
they do request &lt;em&gt;all&lt;/em&gt; resources they will ever need, but if the processes
&lt;em&gt;actually don't&lt;/em&gt; request all resources they will ever need (maybe one less, for
example), then it might be enough for the system to avoid getting caught in
a deadlock.&lt;/p&gt;
&lt;p&gt;See the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Banker%27s_algorithm"&gt;Wikipedia article on Banker's Algorithm&lt;/a&gt; for a much better
explanation.&lt;/p&gt;
</summary><category term="threads"></category></entry><entry><title>Gaussian (Gauss-Jordan) Elimination in Ruby</title><link href="/blog2/gaussian-elimination-in-ruby.html" rel="alternate"></link><updated>2012-11-11T00:00:00-07:00</updated><author><name>Taylor Hornby</name></author><id>tag:/blog2,2012-11-11:gaussian-elimination-in-ruby.html</id><summary type="html">&lt;p&gt;I had to do some Gaussian elimination for an assignment. So here's Gaussian
elimination in Ruby:&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="c1"&gt;# Performs an in-place Gaussian elimination on an NxN matrix 'matrix' (2D array&lt;/span&gt;
&lt;span class="c1"&gt;# of Numeric objects) and an N-element vector 'vector.' (array of N Numerics).&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;gaussianElimination&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;pivotIdx&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="c1"&gt;# Find the best pivot. This is the one who has the largest absolute value&lt;/span&gt;
    &lt;span class="c1"&gt;# relative to his row (scaled partial pivoting). This step can be omitted&lt;/span&gt;
    &lt;span class="c1"&gt;# to improve speed at the cost of increased error.&lt;/span&gt;
    &lt;span class="n"&gt;maxRelVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;maxIdx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pivotIdx&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pivotIdx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;relVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;pivotIdx&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;relVal&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;maxRelVal&lt;/span&gt;
        &lt;span class="n"&gt;maxRelVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;relVal&lt;/span&gt;
        &lt;span class="n"&gt;maxIdx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Swap the best pivot row into place.&lt;/span&gt;
    &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pivotIdx&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;maxIdx&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;maxIdx&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pivotIdx&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pivotIdx&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;maxIdx&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;maxIdx&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pivotIdx&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;pivot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pivotIdx&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;pivotIdx&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="c1"&gt;# Loop over each row below the pivot row.&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pivotIdx&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="c1"&gt;# Find factor so that [this row] = [this row] - factor*[pivot row]&lt;/span&gt;
    &lt;span class="c1"&gt;# leaves 0 in the pivot column.&lt;/span&gt;
    &lt;span class="n"&gt;factor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;pivotIdx&lt;/span&gt;&lt;span class="o"&gt;]/&lt;/span&gt;&lt;span class="n"&gt;pivot&lt;/span&gt;
    &lt;span class="c1"&gt;# We know it will be zero.&lt;/span&gt;
    &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;pivotIdx&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="c1"&gt;# Compute [this row] = [this row] - factor*[pivot row] for the other cols.&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pivotIdx&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;factor&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pivotIdx&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;factor&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pivotIdx&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Assumes 'matrix' is in row echelon form.&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;backSubstitution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;downto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Example usage:&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'pp'&lt;/span&gt;

&lt;span class="c1"&gt;# A system of equations: matrix * X = vector&lt;/span&gt;
&lt;span class="n"&gt;matrix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;vector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Create a backup for verification.&lt;/span&gt;
&lt;span class="n"&gt;matrix_backup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Marshal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Marshal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;vector_backup&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dup&lt;/span&gt;

&lt;span class="c1"&gt;# Gaussian elemination to put the system in row echelon form.&lt;/span&gt;
&lt;span class="n"&gt;gaussianElimination&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Back-substitution to solve the system.&lt;/span&gt;
&lt;span class="n"&gt;backSubstitution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Print the result.&lt;/span&gt;
&lt;span class="n"&gt;pp&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;
&lt;span class="n"&gt;pp&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;

&lt;span class="c1"&gt;# Verify the result.&lt;/span&gt;
&lt;span class="n"&gt;pass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;

&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matrix_backup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;eqn&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matrix_backup&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;eqn&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;term&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;matrix_backup&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;eqn&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;term&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;term&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;vector_backup&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;eqn&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mo"&gt;0000000001&lt;/span&gt;
    &lt;span class="n"&gt;pass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pass&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Verification PASSED.&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Verification FAILED.&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
</summary><category term="gaussian elimination"></category><category term="matrices"></category></entry><entry><title>The Machine that Alters Votes (2012 USA Election)</title><link href="/blog2/the-machine-that-alters-votes-2012-usa-election.html" rel="alternate"></link><updated>2012-11-06T00:00:00-07:00</updated><author><name>Taylor Hornby</name></author><id>tag:/blog2,2012-11-06:the-machine-that-alters-votes-2012-usa-election.html</id><summary type="html">&lt;p&gt;So there's &lt;a class="reference external" href="https://www.youtube.com/watch?v=QdpGd74DrBM"&gt;this video&lt;/a&gt; of a voting machine that selects Romney when you try to
click on Obama.&lt;/p&gt;
&lt;p&gt;To someone who has had some experience with touch screen technology, it looks
like the touch system is just out of sync with the UI, which could be fixed by
re-calibrating the system. According to the uploader, it is not a calibration
issue, because they tried tapping other names and they all worked fine. You can
find the uploader's comments in the description of the video. I have no reason
to doubt the uploader's sincerity, since &lt;a class="reference external" href="http://www.motherjones.com/mojo/2012/11/romney-loving-voting-machine-recalibrated-and-back-online"&gt;according to Mother Jones&lt;/a&gt; the
machine was actually taken out of service and &amp;quot;recalibrated.&amp;quot; So the video is
(probably) not fake.&lt;/p&gt;
&lt;p&gt;A lot of people are now assuming this was done intentionally to steal votes from
Obama in favor of Romney. The mainstream media is picking up on the story as
well. The problem with this belief is that if someone did intentionally make the
voting machine behave this way, they could have done something far worse. They
could have made the system swap the votes invisibly, behind-the-scenes, so that
nobody ever notices.&lt;/p&gt;
&lt;p&gt;If it was done intentionally, and whoever did it could have made the machine
swap votes invisibly, then you have to ask the question: Why did they make it
visible? Certainly if a &lt;em&gt;lot&lt;/em&gt; of these machines started doing what is seen in
the video, a lot of people would notice, and it would be clear that there was
some kind of fraud was going on. The election results would clearly be invalid.
A lot of vote-altering machines would invalidate the election, but just one is
enough to make everyone panic and to get the story covered by the popular news
media, giving Romney some potentially bad publicity. So a possibly better
explanation, if it was intentional, is that it was done by a supporter of one of
the &lt;em&gt;other&lt;/em&gt; candidates.&lt;/p&gt;
&lt;p&gt;Or, it could just be a bug. I think it is.&lt;/p&gt;
</summary><category term="voting"></category></entry><entry><title>Coders, PLEASE STOP inventing your own hash functions!</title><link href="/blog2/coders-please-stop-inventing-your-own-hash-functions.html" rel="alternate"></link><updated>2012-08-21T00:00:00-06:00</updated><author><name>Taylor Hornby</name></author><id>tag:/blog2,2012-08-21:coders-please-stop-inventing-your-own-hash-functions.html</id><summary type="html">&lt;p&gt;Today, I came across an &lt;a class="reference external" href="&amp;quot;http://arstechnica.com/security/2012/08/passwords-under-assault/"&gt;article on password cracking&lt;/a&gt;. In the comment section
I saw someone had posted (presumably right after they just read about salting)
the following reply:&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
My solution: don't store hashes as a single SHA1 or MD5 result ...
combine it for further obfuscation. A hash is designed to fall into
enemy hands, so don't make it easy to produce rainbow tables.

SAMPLE - All other password weaknesses still apply!

function generateHash($name, $pass)
{
$salt = '';
for($i = 0; $i &amp;lt; strlen($name); $i++) { $salt = $i . $salt . $name . $i; }
return (sha1($salt . $pass) . sha1($pass . $name . $salt));
}
&lt;/pre&gt;
&lt;p&gt;This code is exactly as secure as &lt;tt class="docutils literal"&gt;sha1( $name . $pass );&lt;/tt&gt;. It does not make
it harder to produce rainbow tables, it is &lt;a class="reference external" href="https://defuse.ca/blog/2012/06/what-is-security-through-obscurity/"&gt;security through obscurity&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I come across an example like this almost ever week. Please stop inventing your
own hash functions and use a &lt;a class="reference external" href="https://crackstation.net/hashing-security.htm"&gt;standard salted and iterated key derivation
function&lt;/a&gt;.&lt;/p&gt;
</summary><category term="passwords"></category><category term="hashing"></category></entry><entry><title>x86 Stack Diagrams</title><link href="/blog2/x86-stack-diagrams.html" rel="alternate"></link><updated>2012-08-14T00:00:00-06:00</updated><author><name>Taylor Hornby</name></author><id>tag:/blog2,2012-08-14:x86-stack-diagrams.html</id><summary type="html">&lt;p&gt;All of the x86 stack diagrams I could find are either cluttered with too much
information, can't be read from a distance, or put the high address on top (I'm
sure there are people who prefer that but... I'm not one of them). So I made my
own.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;With low address on top (stack growing up, strcpy going down):&lt;/strong&gt;&lt;/p&gt;
&lt;img alt="x86 Stack with low addresses on top" src="https://defuse.ca/images/stack-low-high.gif" /&gt;
&lt;p&gt;&lt;strong&gt;With high address on top (stack growing down, strcpy going up):&lt;/strong&gt;&lt;/p&gt;
&lt;img alt="x86 Stack with high addresses on top" src="https://defuse.ca/images/stack-high-low.gif" /&gt;
</summary><category term="x86"></category><category term="assembly"></category></entry><entry><title>Recovering CBC-mode IV via Chosen Ciphertext</title><link href="/blog2/recovering-cbc-mode-iv-chosen-ciphertext.html" rel="alternate"></link><updated>2012-08-12T00:00:00-06:00</updated><author><name>Taylor Hornby</name></author><id>tag:/blog2,2012-08-12:recovering-cbc-mode-iv-chosen-ciphertext.html</id><summary type="html">&lt;p&gt;Suppose a system uses a constant internal initialization vector to
encrypt/decrypt data in CBC mode, and you'd like to know what it is. If you can
make the system decrypt chosen ciphertexts, this is how you do it:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Make the system decrypt two equal blocks of ciphertext (e.g. all zeroes).&lt;/li&gt;
&lt;li&gt;XOR the two resulting blocks of &amp;quot;plaintext&amp;quot; together.&lt;/li&gt;
&lt;li&gt;XOR that with the original ciphertext block.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Visually:&lt;/p&gt;
&lt;img alt="Recovering IV with chosen ciphertext" src="https://defuse.ca/images/iv-recovery.gif" /&gt;
&lt;p&gt;The best I can think of for recovering a static IV under chosen plaintext is
a meet-in-the-middle attack as follows.&lt;/p&gt;
&lt;p&gt;Observation 1: We can specify input directly to the cipher by:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Encrypt a one-block plaintext X, getting the resulting ciphertext C.&lt;/li&gt;
&lt;li&gt;Encrypt the two-block plaintext X||(Y xor C), where Y is the block we want to
feed directly into the cipher.&lt;/li&gt;
&lt;li&gt;The second block of ciphertext will be the result of feeding Y directly into
the cipher.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Observation 2: We can encrypt the IV itself and variations of it by varying the
first block of plaintext. Formally C = E(V xor IV), when V is the first block of
plaintext. We'll call V a &amp;quot;variation vector.&amp;quot;&lt;/p&gt;
&lt;p&gt;So,&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create a lookup table mapping 2^64 (assuming the block size is 128 bits)
random variation vectors &lt;em&gt;from&lt;/em&gt; the resulting ciphertext. This lets us look
up what variation we made to the IV to result in a given ciphertext block.&lt;/li&gt;
&lt;li&gt;Use the method in observation 1 to encrypt random blocks fed directly into
the cipher. Look up each ciphertext in the table from step (1). If it's
there, then the IV is &amp;lt;the block that was fed directly into the cipher&amp;gt; XOR
&amp;lt;the variation vector&amp;gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The lookup table from step (1) gives us a 1 in 2^64 chance of finding the IV per
known plaintext-ciphertext pair. So it should take about 2^64 iterations in step
(2) before we recover the IV.&lt;/p&gt;
</summary><category term="cryptography"></category></entry><entry><title>Visual Basic's "With" in Ruby</title><link href="/blog2/visual-basic-with-in-ruby.html" rel="alternate"></link><updated>2012-08-04T00:00:00-06:00</updated><author><name>Taylor Hornby</name></author><id>tag:/blog2,2012-08-04:visual-basic-with-in-ruby.html</id><summary type="html">&lt;pre class="code ruby literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="no"&gt;Math&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Deeply nested modules&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Foo&lt;/span&gt;
  &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Bar&lt;/span&gt;

    &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Baz&lt;/span&gt;
      &lt;span class="no"&gt;A_CONSTANT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;aMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="no"&gt;A_CONSTANT&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="no"&gt;A_CONSTANT&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Biz&lt;/span&gt;
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;anotherMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;hello &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="ss"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="ss"&gt;:Bar&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="ss"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="ss"&gt;:Baz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;aMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="ss"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="ss"&gt;:Biz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;anotherMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bob&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
</summary><category term="basic"></category></entry><entry><title>Raspberry PI: Enable MPlayer and VLC audio on Raspbian</title><link href="/blog2/raspberry-pi-enable-mplayer-and-vlc-audio-on-rasbian.html" rel="alternate"></link><updated>2012-08-02T00:00:00-06:00</updated><author><name>Taylor Hornby</name></author><id>tag:/blog2,2012-08-02:raspberry-pi-enable-mplayer-and-vlc-audio-on-rasbian.html</id><summary type="html">&lt;!-- NOTE: The slug misspells raspbian intentionally so it matches the old URL. --&gt;
&lt;p&gt;If mplayer is giving you an error like the following...&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
AO: [pulse] Init failed: Connection refused
Failed to initialize audio driver 'pulse'
[AO_ALSA] Unable to set hw-parameters: Invalid argument
Failed to initialize audio driver 'alsa'
[AO SDL] Samplerate: 44100Hz Channels: Stereo Format floatle
[AO SDL] using aalib audio driver.
[AO SDL] Unsupported audio format: 0x1d.
[AO SDL] Unable to open audio: No available audio device
Failed to initialize audio driver 'sdl:aalib'
Could not open/initialize audio device -&amp;gt; no sound.
Audio: no sound
Video: no video
&lt;/pre&gt;
&lt;p&gt;... add the following to /etc/asound.conf (create it if it does not exist):&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
pcm.!default {
    type hw
    card 0
}

ctl.!default {
    type hw
    card 0
}
&lt;/pre&gt;
&lt;p&gt;Then, run:&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
modprobe snd_bcm2835
&lt;/pre&gt;
&lt;p&gt;Then add the following &lt;tt class="docutils literal"&gt;/etc/modules&lt;/tt&gt; (unless it's already there):&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
snd-bcm2835
&lt;/pre&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.raspberrypi.org/phpBB3/viewtopic.php?f=66&amp;amp;t=7107"&gt;Source - &amp;quot;ALSA on Raspbian&amp;quot;&lt;/a&gt;.&lt;/p&gt;
</summary><category term="raspberry pi"></category><category term="raspbian"></category></entry><entry><title>Linux: Fix pipe character on ASUS laptops</title><link href="/blog2/linux-fix-pipe-character-on-asus-laptops.html" rel="alternate"></link><updated>2012-07-27T00:00:00-06:00</updated><author><name>Taylor Hornby</name></author><id>tag:/blog2,2012-07-27:linux-fix-pipe-character-on-asus-laptops.html</id><summary type="html">&lt;p&gt;Is your pipe/backslash key not typing pipes and backslashes? Is it typing
less-than and greater-than symbols? If so, add...&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
key &amp;lt;LSGT&amp;gt; { [ backslash, bar, backslash, bar] };
&lt;/pre&gt;
&lt;p&gt;..to &lt;cite&gt;/usr/share/X11/xkb/symbols/us&lt;/cite&gt; in the &lt;cite&gt;kxb_symbols&lt;/cite&gt; &lt;cite&gt;&amp;quot;basic&amp;quot;&lt;/cite&gt; section.&lt;/p&gt;
&lt;p&gt;This seems to be a problem with ASUS laptops, I've seen two of them doing this.&lt;/p&gt;
&lt;p&gt;Reference: &lt;a class="reference external" href="http://forums.fedoraforum.org/showthread.php?t=240415"&gt;http://forums.fedoraforum.org/showthread.php?t=240415&lt;/a&gt;&lt;/p&gt;
</summary><category term="keyboard"></category></entry><entry><title>How to install mod_ruby on Debian Squeeze</title><link href="/blog2/how-to-install-mod_ruby-on-debian-squeeze.html" rel="alternate"></link><updated>2012-07-22T00:00:00-06:00</updated><author><name>Taylor Hornby</name></author><id>tag:/blog2,2012-07-22:how-to-install-mod_ruby-on-debian-squeeze.html</id><summary type="html">&lt;p&gt;If you're a PHP developer that's starting to fall in love with ruby (like me),
you'll want to know how to write &amp;quot;PHP-style&amp;quot; web applications in ruby, for small
web apps that don't need the complexity of Ruby on Rails. You want:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;No per-app configuration necessary. Installing the app is as simple as
uploading the script files.&lt;/li&gt;
&lt;li&gt;Each ruby file you upload is an independent web page, e.g.
&lt;a class="reference external" href="http://example.com/foo.rhtml"&gt;http://example.com/foo.rhtml&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Scripts are HTML with ruby code inside delimiters (like php's &amp;lt;?php and ?&amp;gt;).&lt;/li&gt;
&lt;li&gt;Scripts have easy access to GET and POST data, as well as HTTP headers and
cookies.&lt;/li&gt;
&lt;li&gt;Scripts can easily send headers, set cookies, etc.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Unfortunately, to get this working on Debian Squeeze, some initial configuration
required, but it's a one time thing and quick in comparison to the per-app
configuration required by RoR.&lt;/p&gt;
&lt;p&gt;First, install mod_ruby:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
apt-get install libapache2-mod-ruby
&lt;/pre&gt;
&lt;p&gt;Second, add the following to your site's configuration and read the embedded
comments. Note that in order to lower the ruby safe level with the RubySafeLevel
directive (default is 1), it must appear &lt;strong&gt;outside any &amp;quot;files&amp;quot;, &amp;quot;directory&amp;quot;, and
&amp;quot;virtualhost&amp;quot; blocks.&lt;/strong&gt; If not, you will get an error like: &lt;tt class="docutils literal"&gt;mod_ruby: can't
decrease RubySafeLevel&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
&amp;lt;IfModule mod_ruby.c&amp;gt;
    RubyRequire apache/ruby-run
    RubyRequire apache/eruby-run

    # Safe level 1 does taint checking, but also won't let you run .rb scripts
    # from a world-writable folder. I highly recommend keeping this at 1, but
    # in a development environment, you can change it to 0 to make scripts
    # run from world-writable folders (OTOH, you really DO want to develop with
    # taint checking turned on).
    RubySafeLevel 1

    # Override the mime types in /etc/mime.types so the output of the script
    # is displayed in the browser, not sent as a download. Some guides will
    # tell you to comment out the corresponding entries in /etc/mime.types, but
    # don't do that as it will affect the entire system, not just apache.
    AddType text/html .rb
    AddType text/html .rbx
    AddType text/html .rhtml

    # NOTE: To make .rb files execute, you will need to add:
    #  Options +ExecCGI
    # to the &amp;lt;Directory&amp;gt; they are in. You DON'T need to do this for .rhtml.
    &amp;lt;Files *.rb&amp;gt;
        SetHandler ruby-object
        RubyHandler Apache::RubyRun.instance
    &amp;lt;/Files&amp;gt;
    &amp;lt;Files *.rbx&amp;gt;
        SetHandler ruby-object
        RubyHandler Apache::RubyRun.instance
    &amp;lt;/Files&amp;gt;
    &amp;lt;Files *.rhtml&amp;gt;
        SetHandler ruby-object
        RubyHandler Apache::ERubyRun.instance
    &amp;lt;/Files&amp;gt;
&amp;lt;/IfModule&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Now, .rhtml files will work like PHP files:&lt;/p&gt;
&lt;pre class="code erb literal-block"&gt;
&lt;span class="x"&gt;&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Hello, world!&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    Even numbers less than 100:
    &amp;lt;ul&amp;gt;
    &lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt;
      &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/li&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;
    &amp;lt;/ul&amp;gt;
    &lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt;
      &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;
      This text repeats &amp;lt;b&amp;gt;50&amp;lt;/b&amp;gt; times! &amp;lt;br /&amp;gt;
    &lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And .rb files will work like CGIs:&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="c1"&gt;#!/usr/bin/ruby&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;ul&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;li&amp;gt;Some text!&amp;lt;/li&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;/ul&amp;gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;In both types of script, you can use &lt;a class="reference external" href="http://modruby.net/en/doc/?Apache%3A%3ARequest"&gt;Apache.request&lt;/a&gt; to read GET and POST
data, set cookies, etc.&lt;/p&gt;
&lt;pre class="code erb literal-block"&gt;
&lt;span class="x"&gt;&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Hello, world!&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
   GET data in rhtml mod_ruby!
   &lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt;
   &lt;span class="no"&gt;Apache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;paramtable&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'count'&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;to_i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
     &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
   &lt;span class="k"&gt;end&lt;/span&gt;
   &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;div class="section" id="why"&gt;
&lt;h2&gt;Why?&lt;/h2&gt;
&lt;p&gt;Writing this post made me realize I'm trying to make ruby do something it
doesn't (yet) do well. PHP has so many built-in features for doing web stuff
like htmlentities, built-in mysql access, and easy access to GET and POST data
through $_GET and $_POST (note that Apache.request.paramtable includes both GET
and POST data, which is bad for security), so for now, I think I'll stick with
PHP until there's a better zero-config lightweight ruby web framework. Sinatra
is the best I have seen so far, but configuring it with Apache is still far too
complicated, in my opinion.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="mod_ruby"></category></entry><entry><title>Escaping String Literals (for JavaScript) in PHP</title><link href="/blog2/escaping-string-literals-for-javascript-in-php.html" rel="alternate"></link><updated>2012-07-01T00:00:00-06:00</updated><author><name>Taylor Hornby</name></author><id>tag:/blog2,2012-07-01:escaping-string-literals-for-javascript-in-php.html</id><summary type="html">&lt;p&gt;Use the following code to escape user-supplied input before inserting it into
a JavaScript string literal.&lt;/p&gt;
&lt;pre class="code php literal-block"&gt;
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;js_string_escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$safe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ctype_alnum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
            &lt;span class="nv"&gt;$safe&lt;/span&gt; &lt;span class="o"&gt;.=&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="nv"&gt;$safe&lt;/span&gt; &lt;span class="o"&gt;.=&lt;/span&gt; &lt;span class="nb"&gt;sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;x%02X&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$safe&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="code php literal-block"&gt;
&lt;span class="x"&gt;&amp;lt;script&amp;gt;
var foo = &amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nx"&gt;js_string_escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$bar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;;
&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The standard htmlentities and htmlspecialchars functions don't work because
JavaScript will interpret the HTML entities as a part of the literal string (not
decode them). addslashes is insufficient because it does not escape other
special characters that might convince some browsers that the string literal or
script section has ended (for example, the string &amp;quot;]]&amp;gt;&amp;quot; to end a &lt;a class="reference external" href="http://www.w3schools.com/xml/xml_cdata.asp"&gt;CDATA&lt;/a&gt;). To
escape integers and floats, use these:&lt;/p&gt;
&lt;pre class="code php literal-block"&gt;
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="c1"&gt;// returns &amp;quot;0&amp;quot; when given something that isn't an integer.
&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;js_integer_escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$cast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;$number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$cast&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;$number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$cast&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code php literal-block"&gt;
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="c1"&gt;// returns &amp;quot;0&amp;quot; when given something that isn't a float
&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;js_float_escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;is_float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;is_numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$number&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;$number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
</summary><category term="javascript"></category><category term="escaping"></category></entry></feed>